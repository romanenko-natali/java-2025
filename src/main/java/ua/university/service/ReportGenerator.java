package ua.university.service;

import ua.university.model.Student;
import ua.university.model.StudentGrade;

import java.util.*;
import java.util.stream.Collectors;

public class ReportGenerator {

    public static String formatExamResult(StudentGrade studentGrade) {
        return switch (studentGrade.examType()) {
            case EXAM -> "–Ü—Å–ø–∏—Ç: " + studentGrade.grade() + " (" + studentGrade.points() + " –±–∞–ª—ñ–≤)";
            case DIFFERENTIATED_CREDIT -> "–î–∏—Ñ. –∑–∞–ª—ñ–∫: " + studentGrade.grade();
            case CREDIT -> studentGrade.grade().isPass() ? "–ó–∞–ª—ñ–∫: –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ" : "–ó–∞–ª—ñ–∫: –Ω–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ";
            case COURSEWORK -> "–ö—É—Ä—Å–æ–≤–∞ —Ä–æ–±–æ—Ç–∞: " + studentGrade.grade();
            case LABORATORY -> "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞: " + studentGrade.points() + " –±–∞–ª—ñ–≤";
        };
    }

    public static String generateStudentReport(StudentGrade[] grades) {
        StringBuilder report = new StringBuilder();

        for (StudentGrade grade : grades) {
            String status = switch (grade.grade()) {
                case A -> "‚òÖ –í—ñ–¥–º—ñ–Ω–Ω–æ";
                case B, C -> "‚úì –î–æ–±—Ä–µ";
                case D -> "‚óã –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ";
                case E -> "‚ñ≥ –î–æ—Å—Ç–∞—Ç–Ω—å–æ";
                case F -> "‚úó –ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ";
            };

            report.append(String.format(
                    "%s - %s: %s –±–∞–ª—ñ–≤ (%s)%n",
                    grade.subject().name(),
                    grade.teacher().getLastName(),
                    grade.points(),
                    status
            ));
        }

        return report.toString();
    }

    // –ê–Ω–∞–ª—ñ–∑ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ –≥—Ä—É–ø–∏
    public static String analyzeGroupPerformance(StudentGrade[] allGrades) {
        if (allGrades == null || allGrades.length == 0) {
            return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.";
        }

        double avgPoints = Arrays.stream(allGrades)
                .mapToInt(StudentGrade::points)
                .average()
                .orElse(0.0);

        long passed = Arrays.stream(allGrades)
                .filter(g -> g.grade().isPass())
                .count();

        long failed = allGrades.length - passed;

        Map<Student, Integer> studentTotal = new HashMap<>();
        for (StudentGrade g : allGrades) {
            studentTotal.merge(g.student(), g.points(), Integer::sum);
        }

        List<Map.Entry<Student, Integer>> top = studentTotal.entrySet()
                .stream()
                .sorted((a, b) -> b.getValue().compareTo(a.getValue()))
                .limit(3)
                .toList();

        StringBuilder analysis = new StringBuilder();
        analysis.append("üìä –ê–Ω–∞–ª—ñ–∑ –≥—Ä—É–ø–∏:\n")
                .append("–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: ").append(String.format("%.2f", avgPoints)).append("\n")
                .append("–ó–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: ").append(passed).append("\n")
                .append("–ù–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: ").append(failed).append("\n\n")
                .append("üèÜ –¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–∏:\n");

        for (var entry : top) {
            analysis.append(entry.getKey().getFirstName())
                    .append(" ")
                    .append(entry.getKey().getLastName())
                    .append(" - ")
                    .append(entry.getValue())
                    .append(" –±–∞–ª—ñ–≤\n");
        }

        return analysis.toString();
    }
}
